From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: alf1e <alfiewbarlow@gmail.com>
Date: Sun, 30 Apr 2023 12:33:01 +0100
Subject: [PATCH] Add configuration


diff --git a/src/main/java/com/itsmealfie0/bacon/BaconConfig.java b/src/main/java/com/itsmealfie0/bacon/BaconConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf5ba4b43ff5726404b40d47ce706369bcd3b222
--- /dev/null
+++ b/src/main/java/com/itsmealfie0/bacon/BaconConfig.java
@@ -0,0 +1,145 @@
+package com.itsmealfie0.bacon;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.attributes.RangedAttribute;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.config.Configuration;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+public class BaconConfig
+{
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Bacon. \n"
+        + "You can enable and disable settings here as well as toggle supported patches. \n\n"
+        + "!!! WARNING !!! \n"
+        + "Not all patches are yet toggleable but are coming soon. To request a patch, create a feature request. \n"
+        + "!!! WARNING !!! \n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    /*========================================================================*/
+
+    public static void init(File configFile)
+    {
+        BaconConfig.CONFIG_FILE = configFile;
+        BaconConfig.config = new YamlConfiguration();
+        try
+        {
+            BaconConfig.config.load( CONFIG_FILE );
+        } catch ( IOException ex )
+        {
+        } catch ( InvalidConfigurationException ex )
+        {
+            Bukkit.getLogger().log( Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex );
+            throw Throwables.propagate( ex );
+        }
+
+        BaconConfig.config.options().header( HEADER );
+        BaconConfig.config.options().copyDefaults( true );
+
+        BaconConfig.version = BaconConfig.getInt( "config-version", 1 );
+        BaconConfig.set( "config-version", 1 );
+        BaconConfig.readConfig( BaconConfig.class, null );
+    }
+
+    public static void readConfig(Class<?> clazz, Object instance) // Paper - package-private -> public
+    {
+        for ( Method method : clazz.getDeclaredMethods() )
+        {
+            if ( Modifier.isPrivate( method.getModifiers() ) )
+            {
+                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
+                {
+                    try
+                    {
+                        method.setAccessible( true );
+                        method.invoke( instance );
+                    } catch ( InvocationTargetException ex )
+                    {
+                        throw Throwables.propagate( ex.getCause() );
+                    } catch ( Exception ex )
+                    {
+                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+                    }
+                }
+            }
+        }
+        // Paper start
+        BaconConfig.save();
+    }
+    public static void save() {
+        // Paper end
+        try
+        {
+            BaconConfig.config.save( CONFIG_FILE );
+        } catch ( IOException ex )
+        {
+            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + BaconConfig.CONFIG_FILE, ex );
+        }
+    }
+
+    private static void set(String path, Object val)
+    {
+        BaconConfig.config.set( path, val );
+    }
+
+    private static boolean getBoolean(String path, boolean def)
+    {
+        BaconConfig.config.addDefault( path, def );
+        return BaconConfig.config.getBoolean( path, BaconConfig.config.getBoolean( path ) );
+    }
+
+    private static int getInt(String path, int def)
+    {
+        BaconConfig.config.addDefault( path, def );
+        return BaconConfig.config.getInt( path, BaconConfig.config.getInt( path ) );
+    }
+
+    private static <T> List getList(String path, T def)
+    {
+        BaconConfig.config.addDefault( path, def );
+        return (List<T>) BaconConfig.config.getList( path, BaconConfig.config.getList( path ) );
+    }
+
+    private static String getString(String path, String def)
+    {
+        BaconConfig.config.addDefault( path, def );
+        return BaconConfig.config.getString( path, BaconConfig.config.getString( path ) );
+    }
+
+    private static double getDouble(String path, double def)
+    {
+        BaconConfig.config.addDefault( path, def );
+        return BaconConfig.config.getDouble( path, BaconConfig.config.getDouble( path ) );
+    }
+
+    public static boolean allowSandDuping;
+
+    private static void allowSandDuping() {
+        BaconConfig.allowSandDuping = BaconConfig.getBoolean("patches.allow-sand-duping", true);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a7e133f3495e9132a5fdae2c24f225e7b026295a..19d698893c5b3779ba3cc9f0344acead27e325d5 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -63,6 +63,9 @@ import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
 // CraftBukkit end
+// Bacon start
+import com.itsmealfie0.bacon.BaconConfig;
+// Bacon end
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
 
@@ -204,6 +207,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
         org.spigotmc.SpigotConfig.registerCommands();
         // Spigot end
+        // Bacon Start
+        com.itsmealfie0.bacon.BaconConfig.init(new java.io.File("bacon.yml"));
+        // Bacon End
         // Paper start
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
         paperConfigurations.initializeGlobalConfiguration();
